node.discovery = {
  enable = true

  persist = true

  bind.ip = ""

  external.ip = null

  boot = [
    #   "ip:port",
    # "127.0.0.1:50505"
    "47.93.247.72:50505",
    "47.94.227.17:50505",
    "47.254.71.98:50505",
    "47.74.14.144:50505",
    "47.74.225.234:50505",
    "101.200.39.156:50505",
    "39.107.127.92:50505",
    "39.105.18.104:50505",
    "47.254.82.253:50505",
    "47.74.242.156:50505",
    "47.74.52.186:50505",
    "47.94.153.97:50505",
    "39.96.79.243:50505",
    "39.107.40.72:50505",
    "39.107.40.224:50505",
    "39.107.40.117:50505",
    "47.95.141.100:50505",
  ]

  # public.home.node
}

node {

  listen.port = 50505

  p2p.version = 111 # mainnet

  # p2p.pingInterval

  # trust node for solidity node
  # trustNode = "ip:port"
  trustNode = "127.0.0.1:5023"

  active = [
    # Active establish connection in any case
    # Sample entries:
    # "ip:port"
    # "127.0.0.1:50505"
  ]

  passive = [
    # Passive accept connection in any case
    # Sample entries:
    # "ip:port",
    # "ip:port"
  ]

  fastForward = [
    #
  ]

  # channel.read.timeout
  # expose extension api to public or not
  walletExtensionApi = true

  connection.timeout = 2

  tcpNettyWorkThreadNum = 0

  udpNettyWorkThreadNum = 1

  # Number of validate sign thread, default availableProcessors / 2
  # validateSignThreadNum = 16

  connectFactor = 0.3
  activeConnectFactor = 0.1

  maxActiveNodes = 30

  maxActiveNodesWithSameIp = 2

  maxHttpConnectNumber = 50

  minParticipationRate = 50

  # check the peer data transfer ,disconnect factor
  disconnectNumberFactor = 0.4
  maxConnectNumberFactor = 0.8
  receiveTcpMinDataLength = 2048
  isOpenFullTcpDisconnect = true

  # validateSignThreadNum
  # validContractProto.threads

  backup {
    port = 5555

    # my priority, each member should use different priority
    priority = 8

    # peer's ip list, can't contain mine
    members = [
      # "ip",
      # "ip"
    ]
  }

  # number of solidity thread in the FullNode.
  # If accessing solidity rpc and http interface timeout, could increase the number of threads,
  # The default value is the number of cpu cores of the machine.
  # solidity.threads = 8

  # Limits the maximum percentage (default 75%) of producing block interval
  # to provide sufficient time to perform other operations e.g. broadcast block
  # blockProducedTimeOut = 75

  # Limits the maximum number (default 700) of transaction from network layer
  # netMaxTrxPerSecond = 700

  http {
    fullNodePort = 9090
    confirmedPort = 9091
  }

  rpc {
    # Number of gRPC thread, default availableProcessors / 2
    port = 5021
    # threads = 16
    confirmedPort = 5023
    # confirmedThreads = 4

    # The maximum number of concurrent calls permitted for each incoming connection
    # maxConcurrentCallsPerConnection =

    # The HTTP/2 flow control window, default 1MB
    # flowControlWindow =

    # Connection being idle for longer than which will be gracefully terminated
    maxConnectionIdleInMillis = 60000

    # Connection lasting longer than which will be gracefully terminated
    # maxConnectionAgeInMillis =

    # The maximum message size allowed to be received on the server, default 4MB
    # maxMessageSize =

    # The maximum size of header list allowed to be received, default 8192
    # maxHeaderListSize =

    # Transactions can only be broadcast if the number of effective connections is reached.
    minEffectiveConnection = 0
  }
}

sync = {

  enabled = false

  # node.count = 30
}

storage {
  # Directory for storing persistent data
  db.version = 2,
  db.engine = "ROCKSDB",
  db.sync = false,
  db.directory = "database",
  index.directory = "index",
  transHistory.switch = "on",
  # You can custom these 14 databases' configs:

  # account, account-index, asset-issue, block, block-index,
  # block_KDB, peers, properties, recent-block, trans,
  # utxo, votes, witness, witness_schedule.

  # Otherwise, db configs will remain defualt and data will be stored in
  # the path of "gsc-db" or which is set by "-d" ("--db-directory").

  # Attention: name is a required field that must be set !!!
  properties = [
    //    {
    //      name = "account",
    //      path = "storage_directory_test",
    //      createIfMissing = true,
    //      paranoidChecks = true,
    //      verifyChecksums = true,
    //      compressionType = 1,        // compressed with snappy
    //      blockSize = 4096,           // 4  KB =         4 * 1024 B
    //      writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B
    //      cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B
    //      maxOpenFiles = 100
    //    },
    //    {
    //      name = "account-index",
    //      path = "storage_directory_test",
    //      createIfMissing = true,
    //      paranoidChecks = true,
    //      verifyChecksums = true,
    //      compressionType = 1,        // compressed with snappy
    //      blockSize = 4096,           // 4  KB =         4 * 1024 B
    //      writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B
    //      cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B
    //      maxOpenFiles = 100
    //    },
  ]

  // needToUpdateAsset = true

  // dbsettings is needed when using rocksdb as the storage implement (db.version=2 and db.engine="ROCKSDB").
  // we'd strongly recommend that do not modify it unless you know every item's meaning clearly.
  dbSettings = {
    levelNumber = 7
    // compactThreads = 32
    blocksize = 64  // n * KB
    maxBytesForLevelBase = 256  // n * MB
    maxBytesForLevelMultiplier = 10
    level0FileNumCompactionTrigger = 4
    targetFileSizeBase = 256  // n * MB
    targetFileSizeMultiplier = 1
  }

  // backup settings when using rocks db as the storage implement (db.version=2 and db.engine="ROCKSDB").
  // if you want to use the backup plugin, please confirm set the db.version=2 and db.engine="ROCKSDB" above.
  backup = {
    enable = false  // indicate whether enable the backup plugin
    propPath = "prop.properties" // record which bak directory is valid
    bak1path = "bak1/database" // you must set two backup directories to prevent application halt unexpected(e.g. kill -9).
    #bak2path = "bak2/database"
    frequency = 10000   // indicate backup db once every 10000 blocks processed.
  }
}

genesis.block = {
  # Reserve balance
  assets = [
    {
      accountName = "Dot"
      accountType = "AssetIssue"
      address = "GSCiqpttdVT4ppnsyMatYgymPnjkuEjKeDtg"
      balance = "1000000000000000"
    },
    {
      accountName = "Blackhole"
      accountType = "AssetIssue"
      address = "GSCSmQLrnwyiYkA8ZHB85TNzJX1d3bgaVHhS"
      balance = "-9223372036854775808"
    }
  ]

  witnesses = [
    {
      address: GSCQiYuhcMxfAoymnwxkDaisTQsSaYgYoSWp,
      url = "GSC1",
      voteCount = 1001
    },
    {
      address: GSCjVVfzy1HVNFEWrCUzfioionL4Jjw6Rxa8,
      url = "GSC2",
      voteCount = 1002
    },
    {
      address: GSCZ8ac98eEMGtLD1RnvKp7Jz5PFJQUfWoNG,
      url = "GSC3",
      voteCount = 1003
    },
    {
      address: GSCTeXKBAs7CJSJqQmbMykMwotqJi9LXzmdY,
      url = "GSC4",
      voteCount = 1004
    },
    {
      address: GSCTrhyY9R7t5G1fZNQYWGD1HankWoJZ97eY,
      url = "GSC5",
      voteCount = 1005
    },
    {
      address: GSCSNDob6nHzG9JZwofyBM4qN3Lwnh1mCBeH,
      url = "GSC6",
      voteCount = 1006
    },
    {
      address: GSCnekSixMSS4JNLUDFQivM79QPQfwtR5m6Z,
      url = "GSC7",
      voteCount = 1007
    },
    {
      address: GSChSV923pgjxFXSb98PkAN4zWnh5eiN8Mpf,
      url = "GSC8",
      voteCount = 1008
    },
    {
      address: GSCa1qVJpYDKGcTHXLGsmib1eWWWSyXaQbao,
      url = "GSC9",
      voteCount = 1009
    },
    {
      address: GSCQTGBA6XBohT1QEDShmpJoYp4b3vU6RKGJ,
      url = "GSC10",
      voteCount = 1010
    },
    {
      address: GSCPu8ASZVnCmgZYeHRPhq4TYnpxvAvFPqX7,
      url = "GSC11",
      voteCount = 1011
    },
    {
      address: GSCgwbnsWFWajmxdzgfC1VzjYqS5FZCuLAbj,
      url = "GSC12",
      voteCount = 1012
    },
    {
      address: GSCQN8yAooQkrfURad1pRHDGAxuGjJ7myXe9,
      url = "GSC13",
      voteCount = 1013
    },
    {
      address: GSCQijCHRH8vkSeEojzVg6JXDjxqbu8x8Mzq,
      url = "GSC14",
      voteCount = 1014
    },
    {
      address: GSCVxM3NmKeqkB3hcaKmL85id1uByrga6iGU,
      url = "GSC15",
      voteCount = 1015
    },
    {
      address: GSCRNVRVkgu2mMKpu4h7mPPWpqoaUe3uqgto,
      url = "GSC16",
      voteCount = 1016
    },
    {
      address: GSCShSmqv6xDTPqPpjUx6wH9szamtgPp3Rsb,
      url = "GSC17",
      voteCount = 1017
    }
  ]

  timestamp = "0" # 2018-12-25 00:00:00

  parentHash = "0x0000000000000000000000000000000000000000000000000000000000000000"

  extraData = "In Us We Trust. 2018/12/25." # 2018-12-25 08:00:00
}

witness = {
  # start mining blocks
  # when 'sync.enabled' is true the mining starts when the sync is complete
  # else the mining will start immediately, taking the best block from database
  # (or genesis if no blocks exist yet)
  mining = false

  // Optional.The default is empty.
  // It is used when the witness account has set the witnessPermission.
  // When it is not empty, the localWitnessAccountAddress represents the address of the witness account,
  // and the localwitness is configured with the private key of the witnessPermissionAddress in the witness account.
  // When it is empty,the localwitness is configured with the private key of the witness account.

  // address =

  privateKey = [
  ]

  #keystore = [
  #  "keystore.json"
  #]

  maintenanceTimeInterval = 21600000

  proposalExpireTime = 259200000

  extraData = "GSC Foundation"

  # Transaction reference block, default is "latest", configure to "confirmed" can avoid TaPos error
  # trx.referenceBlock = "latest" // latest; confirmed;

  # This property sets the number of milliseconds after the creation of the transaction that is expired, default value is  60000.
  # trx.expirationTimeInMilliseconds = 60000

  # checkFrozenTime
}

committee = {
  allowCreationOfContracts = 1  //mainnet:0 (reset by committee),test:1
  allowAdaptiveCpu = 1  //mainnet:0 (reset by committee),test:1
  allowMultiSign = 1
  allowDelegateResource = 1
  allowSameTokenName = 1
  allowGvmTransferGrc10 = 1
  allowGvmConstantinople = 1
  allowProtoFilterNum = 1
  allowAccountStateRoot = 1
}

vm = {
  supportConstant = true
  minTimeRatio = 0.0
  maxTimeRatio = 5.0
  saveInternalTx = true

  # vmTrace
  # In rare cases, transactions that will be within the specified maximum execution time (default 10(ms)) are re-executed and packaged
  # longRunningTime = 10
}

event.subscribe = {
  native = {
    useNativeQueue = true // if true, use native message queue, else use event plugin.
    bindport = 5025 // bind port
    sendqueuelength = 1000 //max length of send queue
  }

  path = "" // absolute path of plugin
  server = "" // target server address to receive event triggers
  dbconfig = "" // dbname|username|password
  contractParse = true,
  topics = [
    {
      triggerName = "block" // block trigger, the value can't be modified
      enable = true
      topic = "block" // plugin topic, the value could be modified
    },
    {
      triggerName = "transaction"
      enable = true
      topic = "transaction"
    },
    {
      triggerName = "contractevent"
      enable = true
      topic = "contractevent"
    },
    {
      triggerName = "contractlog"
      enable = true
      topic = "contractlog"
    }
  ]

  filter = {
    fromblock = "" // the value could be "", "earliest" or a specified block number as the beginning of the queried range
    toblock = "" // the value could be "", "latest" or a specified block number as end of the queried range
    contractAddress = [
      "" // contract address you want to subscribe, if it's set to "", you will receive contract logs/events with any contract address.
    ]

    contractTopic = [
      "" // contract topic you want to subscribe, if it's set to "", you will receive contract logs/events with any contract topic.
    ]
  }
}