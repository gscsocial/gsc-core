/*
 * GSC (Global Social Chain), a blockchain fit for mass adoption and
 * a sustainable token economy model, is the decentralized global social
 * chain with highly secure, low latency, and near-zero fee transactional system.
 *
 * gsc-core is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * License GSC-Core is under the GNU General Public License v3. See LICENSE.
 */

package org.gsc.utils;

import static java.nio.charset.StandardCharsets.UTF_8;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.util.Properties;

import lombok.extern.slf4j.Slf4j;

@Slf4j
public class PropUtil {

    public static String readProperty(String file, String key) {
        InputStream is = null;
        FileInputStream fis = null;
        Properties prop;
        try {
            prop = new Properties();
            fis = new FileInputStream(file);
            is = new BufferedInputStream(fis);
            prop.load(is);
            String value = new String(prop.getProperty(key, "").getBytes("ISO-8859-1"), "UTF-8");
            return value;
        } catch (Exception e) {
            logger.error("{}", e);
            return "";
        } finally {
            try {
                if (fis != null) {
                    fis.close();
                }
            } catch (Exception e) {
                logger.warn("{}", e);
            }

            try {
                if (is != null) {
                    is.close();
                }
            } catch (Exception e) {
                logger.error("{}", e);
            }
        }
    }

    public static boolean writeProperty(String file, String key, String value) {
        FileInputStream in = null;
        OutputStream out = null;
        BufferedReader br = null;
        BufferedWriter bw = null;
        Properties properties = new Properties();

        try {
            in = new FileInputStream(file);
            br = new BufferedReader(new InputStreamReader(in, UTF_8));
            properties.load(br);
            out = new FileOutputStream(file);
            bw = new BufferedWriter(new OutputStreamWriter(out, UTF_8));
            properties.setProperty(key, value);
            properties.store(bw, "Generated by the application.  PLEASE DO NOT EDIT! ");
            return true;
        } catch (Exception e) {
            logger.warn("{}", e);
            return false;
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
            } catch (Exception e) {
                logger.warn("{}", e);
            }

            try {
                if (br != null) {
                    br.close();
                }
            } catch (Exception e) {
                logger.warn("{}", e);
            }

            try {
                if (out != null) {
                    out.close();
                }
            } catch (Exception e) {
                logger.warn("{}", e);
            }

            try {
                if (bw != null) {
                    bw.close();
                }
            } catch (Exception e) {
                logger.warn("{}", e);
            }
        }

    }

}